{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"hydraters","text":"<p>Hydrate Python dictionaries with Rust. A general-purpose algorithm, used in pgstac to reduce the size of the <code>items</code> table.</p> <pre><code>import hydraters\n\nbase = {\"a\": \"first\", \"b\": \"second\", \"c\": {\"d\": \"third\"}}\nitem = {\"c\": {\"e\": \"fourth\", \"f\": \"fifth\"}}\nresult = hydraters.hydrate(base, item)\nassert result == {\n    \"a\": \"first\",\n    \"b\": \"second\",\n    \"c\": {\"d\": \"third\", \"e\": \"fourth\", \"f\": \"fifth\"},\n}\n</code></pre> <p>If you want to clean out any lingering <code>DO_NOT_MERGE_MARKER</code> entries after hydration, pass <code>strip_unmatched_markers=True</code>. This will call <code>hydraters.strip_unmatched_markers</code> on the hydrated item before it is returned and will emit the same warning when markers are stripped.</p> <pre><code>import warnings\nimport hydraters\n\nitem = {\"a\": hydraters.DO_NOT_MERGE_MARKER, \"b\": {\"c\": \"value\"}}\n\nwith warnings.catch_warnings():\n    warnings.simplefilter(\"ignore\")\n    hydraters.hydrate({}, item, strip_unmatched_markers=True)\n\nassert item == {\"b\": {\"c\": \"value\"}}\n</code></pre> <p>Strip existing data back to a clean state by removing any keys whose value is <code>DO_NOT_MERGE_MARKER</code>. A warning lists every stripped path using JSONPath dot notation (for example <code>$.assets[0].href</code>).</p> <pre><code>item = {\n    \"a\": hydraters.DO_NOT_MERGE_MARKER,\n    \"b\": {\"c\": hydraters.DO_NOT_MERGE_MARKER, \"d\": 1},\n}\n\nhydraters.strip_unmatched_markers(item)\nassert item == {\"b\": {\"d\": 1}}\n</code></pre>"},{"location":"#installation","title":"Installation","text":"<pre><code>python -m pip install hydraters\n</code></pre> <p>Or, if you're using uv:</p> <pre><code>uv add hydraters\n</code></pre>"},{"location":"#developing","title":"Developing","text":"<p>Get Rust and uv. Then:</p> <pre><code>git clone git@github.com:developmentseed/hydraters.git\ncd hydraters\nuv sync\nuv run pre-commit install\n</code></pre> <p>To run tests:</p> <pre><code>uv run pytest\n</code></pre>"},{"location":"#background","title":"Background","text":"<p>The code for this package was taken from pypgstac. It came from some benchmarking that determined it was much faster to do this operation in Rust than in pure Python.</p>"},{"location":"#license","title":"License","text":"<p>MIT</p>"},{"location":"api/","title":"API","text":"<p>The hydraters API.</p>"},{"location":"api/#hydraters.dehydrate","title":"hydraters.dehydrate","text":"<pre><code>dehydrate(base: dict[str, Any], item: dict[str, Any]) -&gt; dict[str, Any]\n</code></pre> <p>Dehydrates an item using a base.</p> <p>Parameters:</p> <ul> <li> <code>base</code>               (<code>dict[str, Any]</code>)           \u2013            <p>The base item to use for dehydration. Any values that are equal on the base and the item will be removed from the item.</p> </li> <li> <code>item</code>               (<code>dict[str, Any]</code>)           \u2013            <p>The item to be dehydrated. The item is mutated in-place, and also returned.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>           \u2013            <p>The dehydrated item.</p> </li> </ul>"},{"location":"api/#hydraters.hydrate","title":"hydraters.hydrate","text":"<pre><code>hydrate(\n    base: dict[str, Any],\n    item: dict[str, Any],\n    strip_unmatched_markers: bool = False,\n) -&gt; dict[str, Any]\n</code></pre> <p>Hydrates an item using a base.</p> <p>Parameters:</p> <ul> <li> <code>base</code>               (<code>dict[str, Any]</code>)           \u2013            <p>The base item to use for hydration. Any values on the base that are not on the item will be added back to the item.</p> </li> <li> <code>item</code>               (<code>dict[str, Any]</code>)           \u2013            <p>The item to hydrate. The item is mutated in-place and also returned.</p> </li> <li> <code>strip_unmatched_markers</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>When <code>True</code> the hydrated item is passed through strip_unmatched_markers before being returned, emitting the same warning and removing any lingering markers.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>           \u2013            <p>The hydrated item.</p> </li> </ul>"},{"location":"api/#hydraters.DO_NOT_MERGE_MARKER","title":"hydraters.DO_NOT_MERGE_MARKER  <code>module-attribute</code>","text":"<pre><code>DO_NOT_MERGE_MARKER: str\n</code></pre> <p>The magic marker that is used to indicate that a field should not be merged.</p>"},{"location":"api/#hydraters.strip_unmatched_markers","title":"hydraters.strip_unmatched_markers","text":"<pre><code>strip_unmatched_markers(item: dict[str, Any]) -&gt; dict[str, Any]\n</code></pre> <p>Remove <code>DO_NOT_MERGE_MARKER</code> entries and warn with their paths.</p> <p>The removal applies recursively. Paths are emitted using JSONPath dot notation like <code>$.a.b</code> or <code>$.assets[0].href</code>.</p> <p>Parameters:</p> <ul> <li> <code>item</code>               (<code>dict[str, Any]</code>)           \u2013            <p>The dictionary to mutate in-place.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>           \u2013            <p>The same dictionary object with marker entries removed.</p> </li> </ul>"}]}